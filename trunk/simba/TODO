
job priority is by start time (from traces)
on submit time jobs move to wait queue

when job is finished it is removed from host
collectors - 
	for each job:
		wait time
		run time
we can report it when job finish
	for each host:
		core used
		memory used
we will have an event (say each 5 minutes) that will check those		

scheduler:
look for host
when there is a match jobs move to host and finish time is entered to event queue
if not found - make reservation: take the best host (more resources) and put reservation on it (this might have performance problem)


TODO:
change configuration of each scheduler to be optimal for runtime (ff)
make configuration more simple
optimize run
to machine_utilization: add how many machines are core/memory full, how many reservations are there.
add real core utilization and check how many machines are in "error state"
allow only "full cores" packing 
change machines memory to hetro and see the effect:
* large jobs should prefer large machines and vice versa
* think about changing scheduling order (sjf/ljf...)
increase gap between scheduling cycles
		
more comments (old bugs)		
handle test finish time on last submit/schedule - when no events in queue...
verify jobs can run on pool - throw them from simulation - ask zamir about parallel
negative job length		 - must be greater than 0. problem with iil_1 traces rounding